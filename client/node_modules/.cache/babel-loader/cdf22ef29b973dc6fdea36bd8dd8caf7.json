{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ilyamez/Google Drive/DEV/react-express-sample-app/client/src/components/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport { withRouter } from 'react-router-dom';\nimport CardSection from './CardSection'; //export default function CheckoutForm() {\n\nfunction CheckoutForm(props) {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const initOrder = new Map([['id', ''], ['item', props.bookId], ['price', '']]);\n  const [order, setOrder] = useState(initOrder);\n\n  const saveOrder = () => {\n    fetch('http://localhost:9000/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        item: order // Use your own property name / key\n\n      })\n    }).then(res => res.json()).then(result => setOrder(result.rows)).catch(err => console.log('error' + err));\n  };\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment(props.stripeSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n        saveOrder(); // Save order when payment is successful\n\n        props.history.push('/'); // assuming there aren't errors\n\n        props.onOrderPlaced(\"success\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardSection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Confirm order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"cFkvD4Ue9SN4QwAIbUawOpcaw1I=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default _c2 = withRouter(CheckoutForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ilyamez/Google Drive/DEV/react-express-sample-app/client/src/components/CheckoutForm.js"],"names":["React","useState","useEffect","useStripe","useElements","CardElement","withRouter","CardSection","CheckoutForm","props","stripe","elements","initOrder","Map","bookId","order","setOrder","saveOrder","fetch","method","headers","body","JSON","stringify","item","then","res","json","result","rows","catch","err","console","log","handleSubmit","event","preventDefault","confirmCardPayment","stripeSecret","payment_method","card","getElement","billing_details","name","error","message","paymentIntent","status","history","push","onOrderPlaced"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAkD,yBAAlD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AAC1B,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,SAAS,GAAG,IAAIC,GAAJ,CAAQ,CAAC,CAAC,IAAD,EAAO,EAAP,CAAD,EAAa,CAAC,MAAD,EAASJ,KAAK,CAACK,MAAf,CAAb,EAAqC,CAAC,OAAD,EAAU,EAAV,CAArC,CAAR,CAAlB;AAGA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAACW,SAAD,CAAlC;;AACA,QAAMK,SAAS,GAAG,MAAM;AACtBC,IAAAA,KAAK,CAAC,8BAAD,EAAiC;AACpCC,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF2B;AAKpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,IAAI,EAAET,KADa,CACN;;AADM,OAAf;AAL8B,KAAjC,CAAL,CASGU,IATH,CASSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EATjB,EAUGF,IAVH,CAUSG,MAAD,IAAYZ,QAAQ,CAACY,MAAM,CAACC,IAAR,CAV5B,EAWGC,KAXH,CAWUC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,UAAQF,GAApB,CAXlB;AAYD,GAbD;;AAeA,QAAMG,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAAC1B,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAMiB,MAAM,GAAG,MAAMlB,MAAM,CAAC2B,kBAAP,CAA0B5B,KAAK,CAAC6B,YAAhC,EAA8C;AACjEC,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAE7B,QAAQ,CAAC8B,UAAT,CAAoBpC,WAApB,CADQ;AAEdqC,QAAAA,eAAe,EAAE;AACfC,UAAAA,IAAI,EAAE;AADS;AAFH;AADiD,KAA9C,CAArB;;AASA,QAAIf,MAAM,CAACgB,KAAX,EAAkB;AAChB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACgB,KAAP,CAAaC,OAAzB;AACD,KAHD,MAGO;AACL;AACA,UAAIjB,MAAM,CAACkB,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD;AAC/C;AACA;AACA;AACA;AACA;AACA9B,QAAAA,SAAS,GANsC,CAMlC;;AACbR,QAAAA,KAAK,CAACuC,OAAN,CAAcC,IAAd,CAAmB,GAAnB,EAP+C,CAOtB;;AAC5BxC,QAAAA,KAAK,CAACyC,aAAN,CAAoB,SAApB;AACE;AACF;AACF,GApCD;;AAsCA,sBACE;AAAM,IAAA,QAAQ,EAAEhB,YAAhB;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,QAAQ,EAAE,CAACxB,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAnEQF,Y;UACQL,S,EACEC,W;;;KAFVI,Y;AAqET,qBAAeF,UAAU,CAACE,YAAD,CAAzB","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\nimport { withRouter } from 'react-router-dom'\nimport CardSection from './CardSection';\n\n//export default function CheckoutForm() {\n\nfunction CheckoutForm(props){\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const initOrder = new Map([['id', ''], ['item', props.bookId], ['price', '']])\n\n\n  const [order, setOrder] = useState(initOrder);\n  const saveOrder = () => {\n    fetch('http://localhost:9000/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        item: order, // Use your own property name / key\n      }),\n    })\n      .then((res) => res.json())\n      .then((result) => setOrder(result.rows))\n      .catch((err) => console.log('error'+err))\n  }\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment(props.stripeSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n        saveOrder(); // Save order when payment is successful\n        props.history.push('/'); // assuming there aren't errors\n    \tprops.onOrderPlaced(\"success\");\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardSection />\n      <button disabled={!stripe}>Confirm order</button>\n    </form>\n  );\n}\n\nexport default withRouter(CheckoutForm)\n\n\n\n\n  \n\n"]},"metadata":{},"sourceType":"module"}