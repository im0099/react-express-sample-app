{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ilyamez/Google Drive/DEV/react-express-sample-app/client/src/components/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection'; //export default function CheckoutForm() {\n\nfunction CheckoutForm(props) {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment(props.stripeSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n        props.history.push('/'); // assuming there aren't errors\n\n        props.onOrderPlaced(order);\n      }\n    }\n  };\n  /* original code\n    const [order, setOrder] = useState(props.checkoutBook);\n    const saveOrder = () => {\n      fetch('http://localhost:9000/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          item: order, // Use your own property name / key\n        }),\n      })\n        .then((res) => res.json())\n        .then((result) => setOrder(result.rows))\n        .catch((err) => console.log('error'+err))\n    }\n  \n    const handleSubmit = (event) => {\n      event.preventDefault();\n      saveOrder(); // Save order when form is submitted\n      props.history.push('/'); // assuming there aren't errors\n      props.onOrderPlaced(order);\n    }\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(CardSection, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !stripe,\n      children: \"Confirm order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default _c2 = withRouter(CheckoutForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ilyamez/Google Drive/DEV/react-express-sample-app/client/src/components/CheckoutForm.js"],"names":["React","useStripe","useElements","CardElement","CardSection","CheckoutForm","props","stripe","elements","handleSubmit","event","preventDefault","result","confirmCardPayment","stripeSecret","payment_method","card","getElement","billing_details","name","error","console","log","message","paymentIntent","status","history","push","onOrderPlaced","order","withRouter"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAkD,yBAAlD;AAEA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AAC1B,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,QAAMO,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAMI,MAAM,GAAG,MAAML,MAAM,CAACM,kBAAP,CAA0BP,KAAK,CAACQ,YAAhC,EAA8C;AACjEC,MAAAA,cAAc,EAAE;AACdC,QAAAA,IAAI,EAAER,QAAQ,CAACS,UAAT,CAAoBd,WAApB,CADQ;AAEde,QAAAA,eAAe,EAAE;AACfC,UAAAA,IAAI,EAAE;AADS;AAFH;AADiD,KAA9C,CAArB;;AASA,QAAIP,MAAM,CAACQ,KAAX,EAAkB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACQ,KAAP,CAAaG,OAAzB;AACD,KAHD,MAGO;AACL;AACA,UAAIX,MAAM,CAACY,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD;AAC/C;AACA;AACA;AACA;AACA;AACAnB,QAAAA,KAAK,CAACoB,OAAN,CAAcC,IAAd,CAAmB,GAAnB,EAN+C,CAMtB;;AAC5BrB,QAAAA,KAAK,CAACsB,aAAN,CAAoBC,KAApB;AACE;AACF;AACF,GAnCD;AAqCF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEE,sBACE;AAAM,IAAA,QAAQ,EAAEpB,YAAhB;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,QAAQ,EAAE,CAACF,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAxEQF,Y;UACQJ,S,EACEC,W;;;KAFVG,Y;AA0ET,qBAAeyB,UAAU,CAACzB,YAAD,CAAzB","sourcesContent":["import React from 'react';\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n\nimport CardSection from './CardSection';\n\n//export default function CheckoutForm() {\n\nfunction CheckoutForm(props){\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment(props.stripeSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n        props.history.push('/'); // assuming there aren't errors\n    \tprops.onOrderPlaced(order);\n      }\n    }\n  };\n\n/* original code\n  const [order, setOrder] = useState(props.checkoutBook);\n  const saveOrder = () => {\n    fetch('http://localhost:9000/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        item: order, // Use your own property name / key\n      }),\n    })\n      .then((res) => res.json())\n      .then((result) => setOrder(result.rows))\n      .catch((err) => console.log('error'+err))\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    saveOrder(); // Save order when form is submitted\n    props.history.push('/'); // assuming there aren't errors\n    props.onOrderPlaced(order);\n  }\n */\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <CardSection />\n      <button disabled={!stripe}>Confirm order</button>\n    </form>\n  );\n}\n\nexport default withRouter(CheckoutForm)\n\n\n\n\n  \n\n"]},"metadata":{},"sourceType":"module"}