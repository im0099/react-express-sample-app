{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ilyamez/Google Drive/DEV/react-express-sample-app/client/src/components/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport { withRouter } from 'react-router-dom';\nimport CardSection from './CardSection';\nimport OrderConfirmation from './OrderConfirmation'; //export default function CheckoutForm() {\n\nfunction CheckoutForm(props) {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [orderStatus, setOrderStatus] = useState('In Checkout');\n  const orderId = Math.floor(Math.random() * Date.now()); //const initOrder = new Map([['id', orderId], ['item', props.bookId], ['price', '11.11']]);\n  //const [order, setOrder] = useState(initOrder);\n\n  const saveOrder = () => {\n    fetch('http://localhost:9000/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: orderId,\n        item: props.book.id,\n        price: props.book.price\n      })\n    }).then(res => res.json()).then(result => {\n      console.log(\"in fetch Order: \" + result); //setOrder(result.rows);\n    }).catch(err => console.log('error' + err));\n  };\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment(props.stripeSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(\"ConfirmCardPayment Error: \" + result.error.message);\n      setOrderStatus(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n        saveOrder(); // Save order when payment is successful\n\n        props.history.push('/'); // assuming there aren't errors\n\n        props.onOrderPlaced(\"success\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(OrderConfirmation, {\n      message: orderStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(CardSection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !stripe,\n        children: \"Confirm order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"sBnkDoAZe2MnBUvmA79Pbcx8S5A=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default _c2 = withRouter(CheckoutForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckoutForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ilyamez/Google Drive/DEV/react-express-sample-app/client/src/components/CheckoutForm.js"],"names":["React","useState","useStripe","useElements","CardElement","withRouter","CardSection","OrderConfirmation","CheckoutForm","props","stripe","elements","orderStatus","setOrderStatus","orderId","Math","floor","random","Date","now","saveOrder","fetch","method","headers","body","JSON","stringify","id","item","book","price","then","res","json","result","console","log","catch","err","handleSubmit","event","preventDefault","confirmCardPayment","stripeSecret","payment_method","card","getElement","billing_details","name","error","message","paymentIntent","status","history","push","onOrderPlaced"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\nimport { withRouter } from 'react-router-dom'\nimport CardSection from './CardSection';\nimport OrderConfirmation from './OrderConfirmation'\n\n\n//export default function CheckoutForm() {\n\nfunction CheckoutForm(props){\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [orderStatus, setOrderStatus] = useState('In Checkout');\n\n\n  const orderId = Math.floor(Math.random() * Date.now());\n  //const initOrder = new Map([['id', orderId], ['item', props.bookId], ['price', '11.11']]);\n  //const [order, setOrder] = useState(initOrder);\n\n  const saveOrder = () => {\n    fetch('http://localhost:9000/orders', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n    \tid: orderId,\n    \titem: props.book.id,\n    \tprice: props.book.price,\n  \t  }),\n    })\n      .then((res) => res.json())\n      .then((result) => {\n      \tconsole.log(\"in fetch Order: \" + result);\n      \t//setOrder(result.rows);\n  \t})\n      .catch((err) => console.log('error'+err))\n  }\n\n  const handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment(props.stripeSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(\"ConfirmCardPayment Error: \" + result.error.message);\n      setOrderStatus(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n        saveOrder(); // Save order when payment is successful\n        props.history.push('/'); // assuming there aren't errors\n    \tprops.onOrderPlaced(\"success\");\n      }\n    }\n  };\n\n  return (\n    <div>\n    \t<OrderConfirmation message={orderStatus}/>\n\t    <form onSubmit={handleSubmit}>\n\t      <CardSection />\n\t      <button disabled={!stripe}>Confirm order</button>\n\t    </form>\n    </div>\n  );\n}\n\nexport default withRouter(CheckoutForm)\n\n\n\n\n  \n\n"]},"metadata":{},"sourceType":"module"}